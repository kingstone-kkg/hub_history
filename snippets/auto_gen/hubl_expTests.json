{
    "containing": {
        "body": [
            "containing"
        ],
        "description": "Returns true if a list contains a value\nParameters:\n- value(object) The value to check is in the list\n",
        "prefix": "containing"
    },
    "containingall": {
        "body": [
            "containingall"
        ],
        "description": "Returns true if a list contains all values in a second list\nParameters:\n- list_two(list) The second list to check if every element is in the first list\n",
        "prefix": "containingall"
    },
    "defined": {
        "body": [
            "defined"
        ],
        "description": "Return true if the variable is defined",
        "prefix": "defined"
    },
    "divisibleby": {
        "body": [
            "divisibleby"
        ],
        "description": "Returns true if a variable is divisible by a number\nParameters:\n- divisor(number) The number to check whether a number is divisible by\n",
        "prefix": "divisibleby"
    },
    "equalto": {
        "body": [
            "equalto"
        ],
        "description": "Returns true if an object has the same value as another object\nParameters:\n- other(object) Another object to check equality against\n",
        "prefix": "equalto"
    },
    "even": {
        "body": [
            "even"
        ],
        "description": "Returns true if the value is even",
        "prefix": "even"
    },
    "iterable": {
        "body": [
            "iterable"
        ],
        "description": "Return true if the object is iterable (sequence, dict, etc)",
        "prefix": "iterable"
    },
    "lower": {
        "body": [
            "lower"
        ],
        "description": "Return true if the given string is all lowercase",
        "prefix": "lower"
    },
    "mapping": {
        "body": [
            "mapping"
        ],
        "description": "Return true if the given object is a dict",
        "prefix": "mapping"
    },
    "none": {
        "body": [
            "none"
        ],
        "description": "Return true if the given object is null / none",
        "prefix": "none"
    },
    "number": {
        "body": [
            "number"
        ],
        "description": "Return true if the object is a number",
        "prefix": "number"
    },
    "odd": {
        "body": [
            "odd"
        ],
        "description": "Return true if a number is an odd number",
        "prefix": "odd"
    },
    "sameas": {
        "body": [
            "sameas"
        ],
        "description": "Return true if variable is pointing at same object as other variable\nParameters:\n- other(object) A second object to check the variables value against\n",
        "prefix": "sameas"
    },
    "sequence": {
        "body": [
            "sequence"
        ],
        "description": "Return true if the variable is a sequence. Sequences are variables that are iterable.",
        "prefix": "sequence"
    },
    "string": {
        "body": [
            "string"
        ],
        "description": "Return true if object is a string",
        "prefix": "string"
    },
    "string_containing": {
        "body": [
            "string_containing"
        ],
        "description": "Return true if object is a string which contains a specified other string\nParameters:\n- check(string) A second string to check is contained in the first string\n",
        "prefix": "string_containing"
    },
    "string_startingwith": {
        "body": [
            "string_startingwith"
        ],
        "description": "Return true if object is a string which starts with a specified other string\nParameters:\n- check(string) A second string to check is the start of the first string\n",
        "prefix": "string_startingwith"
    },
    "truthy": {
        "body": [
            "truthy"
        ],
        "description": "Return true if object is 'truthy'",
        "prefix": "truthy"
    },
    "undefined": {
        "body": [
            "undefined"
        ],
        "description": "Return true if object is undefined",
        "prefix": "undefined"
    },
    "upper": {
        "body": [
            "upper"
        ],
        "description": "Return true if string is all uppercased",
        "prefix": "upper"
    },
    "within": {
        "body": [
            "within"
        ],
        "description": "Returns true if a value is within a list\nParameters:\n- list(list) A list to check if the value is in.\n",
        "prefix": "within"
    }
}