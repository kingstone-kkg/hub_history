{
    "blog_all_posts_url": {
        "body": [
            "blog_all_posts_url(${selected_blog})"
        ],
        "description": "Returns a full URL to the listing page for all blog posts for the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n",
        "prefix": "~blog_all_posts_url"
    },
    "blog_author_url": {
        "body": [
            "blog_author_url(${selected_blog}, ${author_slug})"
        ],
        "description": "Returns a full URL to the specified author's listing page for the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- author_slug(author slug) Specifies which author to link to\n",
        "prefix": "~blog_author_url"
    },
    "blog_authors": {
        "body": [
            "blog_authors(${selected_blog}, ${limit})"
        ],
        "description": "Returns a sequence of blog author objects for the specified blog, sorted by slug ascending\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(numeric) Max authors to return\n",
        "prefix": "~blog_authors"
    },
    "blog_page_link": {
        "body": [
            "blog_page_link(${page})"
        ],
        "description": "Returns the absolute url of the specified paginated listing page for the current blog\nParameters:\n- page(number) Required page number used to generate url\n",
        "prefix": "~blog_page_link"
    },
    "blog_popular_posts": {
        "body": [
            "blog_popular_posts(${selected_blog}, ${limit}, ${tag_slug})"
        ],
        "description": "Returns a sequence of blog post objects for the specified blog, sorted by most popular first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(number) Specifies the number of posts to add to the sequence\n- tag_slug(tag slug) Optional tag to filter posts by\n",
        "prefix": "~blog_popular_posts"
    },
    "blog_post_archive_url": {
        "body": [
            "blog_post_archive_url(${selected_blog}, ${year}, ${month}, ${day})"
        ],
        "description": "Returns a full URL to the archive listing page for the given date values on the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- year(number) The year\n- month(number) The optional month\n- day(number) The optional day\n",
        "prefix": "~blog_post_archive_url"
    },
    "blog_post_by_id": {
        "body": [
            "blog_post_by_id(${blog_post_id})"
        ],
        "description": "Returns a blog post by id\nParameters:\n- blog_post_id(id) The id of the blog post to look up\n",
        "prefix": "~blog_post_by_id"
    },
    "blog_recent_author_posts": {
        "body": [
            "blog_recent_author_posts(${selected_blog}, ${author_slug}, ${limit})"
        ],
        "description": "Returns a sequence of blog post objects for the specified blog, by the specified author, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- author_slug(author slug) Specifies which author to filter on\n- limit(number) Specifies the number of posts to add to the sequence\n",
        "prefix": "~blog_recent_author_posts"
    },
    "blog_recent_posts": {
        "body": [
            "blog_recent_posts(${selected_blog}, ${limit})"
        ],
        "description": "Returns a sequence of blog post objects for the specified blog, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(number) Specifies the number of posts to add to the sequence, maximum 200.\n",
        "prefix": "~blog_recent_posts"
    },
    "blog_recent_tag_posts": {
        "body": [
            "blog_recent_tag_posts(${selected_blog}, ${tag_slug}, ${limit})"
        ],
        "description": "Returns a sequence of blog post objects for the specified blog, for the specified tag, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- tag_slug(tag slug) Specifies which tag to filter on\n- limit(number) Specifies the number of posts to add to the sequence\n",
        "prefix": "~blog_recent_tag_posts"
    },
    "blog_recent_topic_posts": {
        "body": [
            "blog_recent_topic_posts(${selected_blog}, ${topic_slug}, ${limit})"
        ],
        "description": "DEPRECATED -- see 'blog_recent_tag_posts'\nReturns a sequence of blog post objects for the specified blog, for the specified topic, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- topic_slug(topic slug) Specifies which topic to filter on\n- limit(number) Specifies the number of posts to add to the sequence\n",
        "prefix": "~blog_recent_topic_posts"
    },
    "blog_tag_url": {
        "body": [
            "blog_tag_url(${selected_blog}, ${tag_slug})"
        ],
        "description": "Returns a full URL to the specified tag's listing page for the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- tag_slug(tag slug) Specifies which tag to link to\n",
        "prefix": "~blog_tag_url"
    },
    "blog_tags": {
        "body": [
            "blog_tags(${selected_blog}, ${limit})"
        ],
        "description": "Returns a sequence of the 250 most blogged-about tags (based on number of associated blog posts) for the specified blog, sorted by blog post count\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(numeric) Max tags to return\n",
        "prefix": "~blog_tags"
    },
    "blog_topics": {
        "body": [
            "blog_topics(${selected_blog}, ${limit})"
        ],
        "description": "DEPRECATED -- see 'blog_tags'\nReturns a sequence of the 250 most blogged-about topics (based on number of associated blog posts) for the specified blog, sorted by blog post count\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(numeric) Max topics to return\n",
        "prefix": "~blog_topics"
    },
    "blog_total_post_count": {
        "body": [
            "blog_total_post_count(${selected_blog})"
        ],
        "description": "Returns the total number of published posts in the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to count\n",
        "prefix": "~blog_total_post_count"
    },
    "color_variant": {
        "body": [
            "color_variant(${base_color}, ${brightness_offset})"
        ],
        "description": "Calculates a new hex color value based on a given input string var and multiplier\nParameters:\n- base_color(hex color string (i.e. #fefefe)) The starting color to be altered\n- brightness_offset(number) A positive or negative number used to lighten or darken the base color\n",
        "prefix": "~color_variant"
    },
    "crm_object": {
        "body": [
            "crm_object(${object_type}, ${query}, ${properties}, ${formatting})"
        ],
        "description": "Gets a single object from the HubSpot CRM by query. For security, only product objects can be retrieved on any public page. Any other object type must be hosted on a page which is either password protected or requires a CMS Membership login. Objects are returned as a dict of properties and values.\nParameters:\n- object_type(string) Required. contact, product, company, deal, ticket or quote\n- query(string) Required. The id of the object OR a query string, delimited by '&'. All expressions are ANDed together. Supported operators are eq (default), neq, lt, lte, gt, gte, is_null and not_null.\n- properties(string) Optional. A comma-separated list of properties to return. By default, a small set of common properties are returned.\n- formatting(boolean) Optional. Format values such as dates and currency according to this portal's settings. Omit or pass 'false' for raw strings.\n",
        "prefix": "~crm_object"
    },
    "cta": {
        "body": [
            "cta(\"${guid}\", ${align_opt})"
        ],
        "description": "Renders a call to action embed tag\nParameters:\n- guid(String) The ID of the CTA to render\n- align_opt(enum justifyleft|justifycenter|justifyright|justifyfull) Adjusts alignment of CTA\n",
        "prefix": "~cta"
    },
    "datetimeformat": {
        "body": [
            "datetimeformat(${var}, \"${format}\", \"${timezone}\")"
        ],
        "description": "formats a date to a string\nParameters:\n- var(date) \n- format(String) \n- timezone(String) Time zone of output date\n",
        "prefix": "~datetimeformat"
    },
    "facebook_messenger_link": {
        "body": [
            "facebook_messenger_link()"
        ],
        "description": "Returns an m.me link for facebook messenger",
        "prefix": "~facebook_messenger_link"
    },
    "follow_me_links": {
        "body": [
            "follow_me_links()"
        ],
        "description": "Returns a list of configured follow me links for the portal",
        "prefix": "~follow_me_links"
    },
    "footer_js": {
        "body": [
            "footer_js()"
        ],
        "description": "Outputs all javascript enqueued for the head as html",
        "prefix": "~footer_js"
    },
    "geo_distance": {
        "body": [
            "geo_distance(${point1}, ${point2_lat}, ${point2_long}, ${units})"
        ],
        "description": "Calculates the ellipsoidal 2D distance between two points on Earth\nParameters:\n- point1(location) location from a HubDB column\n- point2_lat(number) latitude of point2\n- point2_long(number) longitude of point2\n- units(string) Units for the return value. Options are FT for feet, MI for miles, M for meters or KM for kilometers\n",
        "prefix": "~geo_distance"
    },
    "get_public_template_url": {
        "body": [
            "get_public_template_url(\"${path}\")"
        ],
        "description": "Returns URL to specified template by given path\nParameters:\n- path(String) The Design Manager file path to the template or file\n",
        "prefix": "~get_public_template_url"
    },
    "get_public_template_url_by_id": {
        "body": [
            "get_public_template_url_by_id(${template_id})"
        ],
        "description": "Returns URL to specified template by id\nParameters:\n- template_id(number) The ID number of the template of file\n",
        "prefix": "~get_public_template_url_by_id"
    },
    "head_css": {
        "body": [
            "head_css()"
        ],
        "description": "Outputs all loaded css as html",
        "prefix": "~head_css"
    },
    "head_js": {
        "body": [
            "head_js()"
        ],
        "description": "Outputs all javascript enqueued for the head as html",
        "prefix": "~head_js"
    },
    "hubdb_table": {
        "body": [
            "hubdb_table(${table_id})"
        ],
        "description": "Returns information about a table\nParameters:\n- table_id(number) id of the table\n",
        "prefix": "~hubdb_table"
    },
    "hubdb_table_column": {
        "body": [
            "hubdb_table_column(${table_id}, \"${column}\")"
        ],
        "description": "Returns column information for specific column in a table\nParameters:\n- table_id(number) id of the table\n- column(String) id or name of the column\n",
        "prefix": "~hubdb_table_column"
    },
    "hubdb_table_row": {
        "body": [
            "hubdb_table_row(${table_id}, ${row_id})"
        ],
        "description": "Returns a row from a table by id\nParameters:\n- table_id(number) id of the table\n- row_id(number) id of the row of the table\n",
        "prefix": "~hubdb_table_row"
    },
    "hubdb_table_rows": {
        "body": [
            "hubdb_table_rows(${table_id}, ${query})"
        ],
        "description": "Returns a list of HubDB rows based on the query\nParameters:\n- table_id(number) id of the table to query\n- query(string) A query such in the same format as a URL query string. If not passed, returns all rows.\n",
        "prefix": "~hubdb_table_rows"
    },
    "i18n_getlanguage": {
        "body": [
            "i18n_getlanguage()"
        ],
        "description": "Gets the language of the current page. Currently works only within modules.",
        "prefix": "~i18n_getlanguage"
    },
    "i18n_getmessage": {
        "body": [
            "i18n_getmessage(\"${message_name}\", ${substitutions})"
        ],
        "description": "Gets the translated message for the language of the rendered page. Currently works only within modules.\nParameters:\n- message_name(String) The name of the message to look up\n- substitutions(sequence of strings) numbered substitution values used in placeholder 'content' attributes\n",
        "prefix": "~i18n_getmessage"
    },
    "include_css": {
        "body": [
            "include_css(\"${path}\")"
        ],
        "description": "Generates stylesheet link tag for specified template path\nParameters:\n- path(String) The Design Manager file path to the template or file\n",
        "prefix": "~include_css"
    },
    "include_default_custom_css": {
        "body": [
            "include_default_custom_css()"
        ],
        "description": "Generates stylesheet link tag for portal default custom css if given bool seq evals to true",
        "prefix": "~include_default_custom_css"
    },
    "include_javascript": {
        "body": [
            "include_javascript(\"${path}\")"
        ],
        "description": "Generates script include tag for specified template path\nParameters:\n- path(String) \n",
        "prefix": "~include_javascript"
    },
    "module_asset_url": {
        "body": [
            "module_asset_url(\"${name}\")"
        ],
        "description": "Gets the URL for an asset attached to a module\nParameters:\n- name(String) The name of the asset\n",
        "prefix": "~module_asset_url"
    },
    "page_by_id": {
        "body": [
            "page_by_id(${page_id})"
        ],
        "description": "Returns a landing or website page by id\nParameters:\n- page_id(id) The id of the page to look up\n",
        "prefix": "~page_by_id"
    },
    "personalization_token": {
        "body": [
            "personalization_token(${expression}, ${default})"
        ],
        "description": "Returns the value of a contact or contact related property, or a default.\nParameters:\n- expression(string) An expression for the object and property to render\n- default(string) (Optional) A default value to use if the expression has no value\n",
        "prefix": "~personalization_token"
    },
    "postal_location": {
        "body": [
            "postal_location(${postal_code}, ${country_code})"
        ],
        "description": "Returns the lat/lon location of a postal code\nParameters:\n- postal_code(string) postal code of the location\n- country_code(string) Country code for the postal code\n",
        "prefix": "~postal_location"
    },
    "range": {
        "body": [
            "range(${start}, ${end}, ${step})"
        ],
        "description": "<p>Return a list containing an arithmetic progression of integers.</p><p>With one parameter, range will return a list from 0 up to (but not including) the value.  With two parameters, the range will start at the first value and increment by 1 up to (but not including) the second value.  The third parameter specifies the step increment.</p> <p>All values can be negative. Impossible ranges will return an empty list.</p><p>Ranges can generate a maximum of 1000 values.</p>\nParameters:\n- start(number) \n- end(number) \n- step(number) \n",
        "prefix": "~range"
    },
    "require_css": {
        "body": [
            "require_css(\"${url}\")"
        ],
        "description": "Loads a css file to be output in the head\nParameters:\n- url(String) \n",
        "prefix": "~require_css"
    },
    "require_default_custom_css": {
        "body": [
            "require_default_custom_css()"
        ],
        "description": "Generates stylesheet link tag for portal default custom css if given bool seq evals to true",
        "prefix": "~require_default_custom_css"
    },
    "require_js": {
        "body": [
            "require_js(\"${url}\", \"${position}\")"
        ],
        "description": "Enqueues a js file to be output in the head or footer\nParameters:\n- url(String) \n- position(String) \n",
        "prefix": "~require_js"
    },
    "resize_image_url": {
        "body": [
            "resize_image_url(${url}, ${width}, ${height}, ${length}, ${upscale}, ${upsize})"
        ],
        "description": "Rewrites the URL of an image in File Manager to a URL that will resize the image on request\nParameters:\n- url(string) URL of a HubSpot-hosted image\n- width(number) the new image width, in pixels\n- height(number) the new image height, in pixels\n- length(number) the new length of the largest side, in pixels\n- upscale(boolean) use the resized image dimensions even if they would scale up the original image (images may appear blurry)\n- upsize(boolean) return the resized image even if it is larger than the original in bytes\n",
        "prefix": "~resize_image_url"
    },
    "script_embed": {
        "body": [
            "script_embed(\"${type}\", \"${src}\", \"${title}\", \"${options}\", \"${description}\")"
        ],
        "description": "Defines an embeddable object which renders differently in the editor vs a live page\nParameters:\n- type(String) Type of embeddable object (wistia|embedly)\n- src(String) Object source\n- title(String) Object title\n- options(String) Options for particular type of embed\n- description(String) Description of embed for SEO purposes\n",
        "prefix": "~script_embed"
    },
    "strtotime": {
        "body": [
            "strtotime(${var}, ${var})"
        ],
        "description": "converts a string and datetime format into a datetime object\nParameters:\n- var(datetimeString) datetime as string\n- var(datetimeFormat) format of the datetime string\n",
        "prefix": "~strtotime"
    },
    "super": {
        "body": [
            "super()"
        ],
        "description": "Only usable within blocks, will render the contents of the parent block by calling super.",
        "prefix": "~super"
    },
    "to_local_time": {
        "body": [
            "to_local_time(${date})"
        ],
        "description": "Converts a UNIX timestamp to a date in the portal's timezone\nParameters:\n- date(datetime) UNIX timestamp to convert to local time\n",
        "prefix": "~to_local_time"
    },
    "today": {
        "body": [
            "today(${timezone})"
        ],
        "description": "return datetime of beginning of the day\nParameters:\n- timezone(string) timezone\n",
        "prefix": "~today"
    },
    "topic_cluster_by_content_id": {
        "body": [
            "topic_cluster_by_content_id(${content_id})"
        ],
        "description": "Returns topic cluster associated with a piece of content.\nParameters:\n- content_id(id) The id of the page to look up\n",
        "prefix": "~topic_cluster_by_content_id"
    },
    "truncate": {
        "body": [
            "truncate(\"${s}\", ${length}, \"${end}\")"
        ],
        "description": "truncates a given string to a specified length\nParameters:\n- s(String) \n- length(number) \n- end(String) \n",
        "prefix": "~truncate"
    },
    "type": {
        "body": [
            "type()"
        ],
        "description": "",
        "prefix": "~type"
    },
    "unixtimestamp": {
        "body": [
            "unixtimestamp(${var})"
        ],
        "description": "gets the unix timestamp milliseconds value of a datetime\nParameters:\n- var(date) \n",
        "prefix": "~unixtimestamp"
    }
}