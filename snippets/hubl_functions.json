{"blog_all_posts_url": {"prefix": "%blog_all_posts_url", "description": "Returns a full URL to the listing page for all blog posts for the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n", "body": ["blog_all_posts_url(${selected_blog})"]}, "blog_author_url": {"prefix": "%blog_author_url", "description": "Returns a full URL to the specified author's listing page for the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- author_slug(author slug) Specifies which author to link to\n", "body": ["blog_author_url(${selected_blog},${author_slug})"]}, "blog_authors": {"prefix": "%blog_authors", "description": "Returns a sequence of blog author objects for the specified blog, sorted by slug ascending\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(numeric) Max authors to return\n", "body": ["blog_authors(${selected_blog},${limit})"]}, "blog_page_link": {"prefix": "%blog_page_link", "description": "Returns the absolute url of the specified paginated listing page for the current blog\nParameters:\n- page(number) Required page number used to generate url\n", "body": ["blog_page_link(${page})"]}, "blog_popular_posts": {"prefix": "%blog_popular_posts", "description": "Returns a sequence of blog post objects for the specified blog, sorted by most popular first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(number) Specifies the number of posts to add to the sequence\n- tag_slug(tag slug) Optional tag to filter posts by\n", "body": ["blog_popular_posts(${selected_blog},${limit},${tag_slug})"]}, "blog_post_archive_url": {"prefix": "%blog_post_archive_url", "description": "Returns a full URL to the archive listing page for the given date values on the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- year(number) The year\n- month(number) The optional month\n- day(number) The optional day\n", "body": ["blog_post_archive_url(${selected_blog},${year},${month},${day})"]}, "blog_post_by_id": {"prefix": "%blog_post_by_id", "description": "Returns a blog post by id\nParameters:\n- blog_post_id(id) The id of the blog post to look up\n", "body": ["blog_post_by_id(${blog_post_id})"]}, "blog_recent_author_posts": {"prefix": "%blog_recent_author_posts", "description": "Returns a sequence of blog post objects for the specified blog, by the specified author, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- author_slug(author slug) Specifies which author to filter on\n- limit(number) Specifies the number of posts to add to the sequence\n", "body": ["blog_recent_author_posts(${selected_blog},${author_slug},${limit})"]}, "blog_recent_posts": {"prefix": "%blog_recent_posts", "description": "Returns a sequence of blog post objects for the specified blog, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(number) Specifies the number of posts to add to the sequence, maximum 200.\n", "body": ["blog_recent_posts(${selected_blog},${limit})"]}, "blog_recent_tag_posts": {"prefix": "%blog_recent_tag_posts", "description": "Returns a sequence of blog post objects for the specified blog, for the specified tag, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- tag_slug(tag slug) Specifies which tag to filter on\n- limit(number) Specifies the number of posts to add to the sequence\n", "body": ["blog_recent_tag_posts(${selected_blog},${tag_slug},${limit})"]}, "blog_recent_topic_posts": {"prefix": "%blog_recent_topic_posts", "description": "DEPRECATED -- see 'blog_recent_tag_posts'\nReturns a sequence of blog post objects for the specified blog, for the specified topic, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- topic_slug(topic slug) Specifies which topic to filter on\n- limit(number) Specifies the number of posts to add to the sequence\n", "body": ["blog_recent_topic_posts(${selected_blog},${topic_slug},${limit})"]}, "blog_tag_url": {"prefix": "%blog_tag_url", "description": "Returns a full URL to the specified tag's listing page for the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- tag_slug(tag slug) Specifies which tag to link to\n", "body": ["blog_tag_url(${selected_blog},${tag_slug})"]}, "blog_tags": {"prefix": "%blog_tags", "description": "Returns a sequence of the 250 most blogged-about tags (based on number of associated blog posts) for the specified blog, sorted by blog post count\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(numeric) Max tags to return\n", "body": ["blog_tags(${selected_blog},${limit})"]}, "blog_topics": {"prefix": "%blog_topics", "description": "DEPRECATED -- see 'blog_tags'\nReturns a sequence of the 250 most blogged-about topics (based on number of associated blog posts) for the specified blog, sorted by blog post count\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(numeric) Max topics to return\n", "body": ["blog_topics(${selected_blog},${limit})"]}, "blog_total_post_count": {"prefix": "%blog_total_post_count", "description": "Returns the total number of published posts in the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to count\n", "body": ["blog_total_post_count(${selected_blog})"]}, "color_variant": {"prefix": "%color_variant", "description": "Calculates a new hex color value based on a given input string var and multiplier\nParameters:\n- base_color(hex color string (i.e. #fefefe)) The starting color to be altered\n- brightness_offset(number) A positive or negative number used to lighten or darken the base color\n", "body": ["color_variant(${base_color},${brightness_offset})"]}, "content_search": {"prefix": "%content_search", "description": "Returns results of searching across all of a portal's content for a specified term\nParameters:\n- content_search_term(string) term to search for\n", "body": ["content_search(${content_search_term})"]}, "cta": {"prefix": "%cta", "description": "Renders a call to action embed tag\nParameters:\n- guid(String) The ID of the CTA to render\n- align_opt(enum justifyleft|justifycenter|justifyright|justifyfull) Adjusts alignment of CTA\n", "body": ["cta(\"${guid}\",${align_opt})"]}, "datetimeformat": {"prefix": "%datetimeformat", "description": "formats a date to a string\nParameters:\n- var(date) \n- format(String) \n- timezone(String) Time zone of output date\n", "body": ["datetimeformat(${var},\"${format}\",\"${timezone}\")"]}, "facebook_messenger_link": {"prefix": "%facebook_messenger_link", "description": "Returns an m.me link for facebook messenger\nParameters:\n", "body": ["facebook_messenger_link()"]}, "follow_me_links": {"prefix": "%follow_me_links", "description": "Returns a list of configured follow me links for the portal\nParameters:\n", "body": ["follow_me_links()"]}, "footer_js": {"prefix": "%footer_js", "description": "Outputs all javascript enqueued for the head as html\nParameters:\n", "body": ["footer_js()"]}, "geo_distance": {"prefix": "%geo_distance", "description": "Calculates the ellipsoidal 2D distance between two points on Earth\nParameters:\n- point1(location) location from a HubDB column\n- point2_lat(number) latitude of point2\n- point2_long(number) longitude of point2\n- units(string) Units for the return value. Options are FT for feet, MI for miles, M for meters or KM for kilometers\n", "body": ["geo_distance(${point1},${point2_lat},${point2_long},${units})"]}, "get_public_template_url": {"prefix": "%get_public_template_url", "description": "Returns URL to specified template by given path\nParameters:\n- path(String) The Design Manager file path to the template or file\n", "body": ["get_public_template_url(\"${path}\")"]}, "get_public_template_url_by_id": {"prefix": "%get_public_template_url_by_id", "description": "Returns URL to specified template by id\nParameters:\n- template_id(number) The ID number of the template of file\n", "body": ["get_public_template_url_by_id(${template_id})"]}, "get_theme_style_setting": {"prefix": "%get_theme_style_setting", "description": "Returns theme overridden settings parameters or settings module parameters by dot notation\nParameters:\n- dot_notated_full_field_name(String) Fully qualified field name using dot notation\n- unit(String) Optional unit parameter\n", "body": ["get_theme_style_setting(\"${dot_notated_full_field_name}\",\"${unit}\")"]}, "head_css": {"prefix": "%head_css", "description": "Outputs all loaded css as html\nParameters:\n", "body": ["head_css()"]}, "head_js": {"prefix": "%head_js", "description": "Outputs all javascript enqueued for the head as html\nParameters:\n", "body": ["head_js()"]}, "hubdb_table": {"prefix": "%hubdb_table", "description": "Returns information about a table\nParameters:\n- table_id(number) id of the table\n", "body": ["hubdb_table(${table_id})"]}, "hubdb_table_column": {"prefix": "%hubdb_table_column", "description": "Returns column information for specific column in a table\nParameters:\n- table_id(number) id of the table\n- column(String) id or name of the column\n", "body": ["hubdb_table_column(${table_id},\"${column}\")"]}, "hubdb_table_row": {"prefix": "%hubdb_table_row", "description": "Returns a row from a table by id\nParameters:\n- table_id(number) id of the table\n- row_id(number) id of the row of the table\n", "body": ["hubdb_table_row(${table_id},${row_id})"]}, "hubdb_table_rows": {"prefix": "%hubdb_table_rows", "description": "Returns a sequence of data table rows based on the query\nParameters:\n- table_id(number) id of the table to query\n- query(string) A query such in the same format as a URL query string. If not passed, returns all rows.\n", "body": ["hubdb_table_rows(${table_id},${query})"]}, "i18n_getlanguage": {"prefix": "%i18n_getlanguage", "description": "Gets the language of the current page. Currently works only within modules.\nParameters:\n", "body": ["i18n_getlanguage()"]}, "i18n_getmessage": {"prefix": "%i18n_getmessage", "description": "Gets the translated message for the language of the rendered page. Currently works only within modules.\nParameters:\n- message_name(String) The name of the message to look up\n- substitutions(sequence of strings) numbered substitution values used in placeholder 'content' attributes\n", "body": ["i18n_getmessage(\"${message_name}\",${substitutions})"]}, "include_css": {"prefix": "%include_css", "description": "Generates stylesheet link tag for specified template path\nParameters:\n- path(String) The Design Manager file path to the template or file\n", "body": ["include_css(\"${path}\")"]}, "include_default_custom_css": {"prefix": "%include_default_custom_css", "description": "Generates stylesheet link tag for portal default custom css if given bool seq evals to true\nParameters:\n", "body": ["include_default_custom_css()"]}, "include_javascript": {"prefix": "%include_javascript", "description": "Generates script include tag for specified template path\nParameters:\n- path(String) \n", "body": ["include_javascript(\"${path}\")"]}, "module_asset_url": {"prefix": "%module_asset_url", "description": "Gets the URL for an asset attached to a module\nParameters:\n- name(String) The name of the asset\n", "body": ["module_asset_url(\"${name}\")"]}, "page_by_id": {"prefix": "%page_by_id", "description": "Returns a landing or website page by id\nParameters:\n- page_id(id) The id of the page to look up\n", "body": ["page_by_id(${page_id})"]}, "personalization_token": {"prefix": "%personalization_token", "description": "Returns the value of a contact or contact related property, or a default.\nParameters:\n- expression(string) An expression for the object and property to render\n- default(string) (Optional) A default value to use if the expression has no value\n", "body": ["personalization_token(${expression},${default})"]}, "postal_location": {"prefix": "%postal_location", "description": "Returns the lat/lon location of a postal code\nParameters:\n- postal_code(string) postal code of the location\n- country_code(string) Country code for the postal code\n", "body": ["postal_location(${postal_code},${country_code})"]}, "range": {"prefix": "%range", "description": "<p>Return a list containing an arithmetic progression of integers.</p><p>With one parameter, range will return a list from 0 up to (but not including) the value.  With two parameters, the range will start at the first value and increment by 1 up to (but not including) the second value.  The third parameter specifies the step increment.</p> <p>All values can be negative. Impossible ranges will return an empty list.</p><p>Ranges can generate a maximum of 1000 values.</p>\nParameters:\n- start(number) \n- end(number) \n- step(number) \n", "body": ["range(${start},${end},${step})"]}, "raw_theme_setting": {"prefix": "%raw_theme_setting", "description": "Returns theme overridden settings parameters or default parameters by dot notation\nParameters:\n- dot_notated_full_field_name(String) Fully qualified field name using dot notation\n", "body": ["raw_theme_setting(\"${dot_notated_full_field_name}\")"]}, "require_css": {"prefix": "%require_css", "description": "Loads a css file to be output in the head\nParameters:\n- url(String) \n", "body": ["require_css(\"${url}\")"]}, "require_default_custom_css": {"prefix": "%require_default_custom_css", "description": "Generates stylesheet link tag for portal default custom css if given bool seq evals to true\nParameters:\n", "body": ["require_default_custom_css()"]}, "require_js": {"prefix": "%require_js", "description": "Enqueues a js file to be output in the head or footer\nParameters:\n- url(String) \n- position(String) \n", "body": ["require_js(\"${url}\",\"${position}\")"]}, "resize_image_url": {"prefix": "%resize_image_url", "description": "Rewrites the URL of an image in File Manager to a URL that will resize the image on request\nParameters:\n- url(string) URL of a HubSpot-hosted image\n- width(number) the new image width, in pixels\n- height(number) the new image height, in pixels\n- length(number) the new length of the largest side, in pixels\n- upscale(boolean) use the resized image dimensions even if they would scale up the original image (images may appear blurry)\n- upsize(boolean) return the resized image even if it is larger than the original in bytes\n", "body": ["resize_image_url(${url},${width},${height},${length},${upscale},${upsize})"]}, "script_embed": {"prefix": "%script_embed", "description": "Defines an embeddable object which renders differently in the editor vs a live page\nParameters:\n- type(String) Type of embeddable object (wistia|embedly)\n- src(String) Object source\n- title(String) Object title\n- options(String) Options for particular type of embed\n- description(String) Description of embed for SEO purposes\n", "body": ["script_embed(\"${type}\",\"${src}\",\"${title}\",\"${options}\",\"${description}\")"]}, "strtotime": {"prefix": "%strtotime", "description": "converts a string and datetime format into a datetime object\nParameters:\n- var(datetimeString) \n- var(datetimeFormat) \n", "body": ["strtotime(${var},${var})"]}, "super": {"prefix": "%super", "description": "Only usable within blocks, will render the contents of the parent block by calling super.\nParameters:\n", "body": ["super()"]}, "to_local_time": {"prefix": "%to_local_time", "description": "Converts a UNIX timestamp to a date in the portal's timezone\nParameters:\n- date(datetime) UNIX timestamp to convert to local time\n", "body": ["to_local_time(${date})"]}, "today": {"prefix": "%today", "description": "return datetime of beginning of the day\nParameters:\n- timezone(string) Optional timezone\n", "body": ["today(${timezone})"]}, "truncate": {"prefix": "%truncate", "description": "truncates a given string to a specified length\nParameters:\n- s(String) \n- length(number) \n- end(String) \n", "body": ["truncate(\"${s}\",${length},\"${end}\")"]}, "type": {"prefix": "%type", "description": "\nParameters:\n", "body": ["type()"]}, "unixtimestamp": {"prefix": "%unixtimestamp", "description": "gets the unix timestamp milliseconds value of a datetime\nParameters:\n- var(date) \n", "body": ["unixtimestamp(${var})"]}}